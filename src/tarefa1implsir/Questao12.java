/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tarefa1implsir;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Hex;
import org.bouncycastle.crypto.InvalidCipherTextException;
import org.bouncycastle.crypto.engines.AESEngine;
import org.bouncycastle.crypto.modes.GCMBlockCipher;
import org.bouncycastle.crypto.params.AEADParameters;
import org.bouncycastle.crypto.params.KeyParameter;

/**
 *
 * @author flavi
 */
public class Questao12 extends javax.swing.JFrame {

    private static final int MAC_SIZE = 128;
    
    public Questao12() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbTitulo = new javax.swing.JLabel();
        lbCriptografar = new javax.swing.JLabel();
        txtImagemCriptografar = new javax.swing.JTextField();
        btnProcurarImagem = new javax.swing.JButton();
        lbDescriptografar = new javax.swing.JLabel();
        txtImagemDescriptografar = new javax.swing.JTextField();
        btnProcurarImagem2 = new javax.swing.JButton();
        btnCriptografar = new javax.swing.JButton();
        btnDescriptografar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtSenha = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbTitulo.setText("Criptografia de imagens");

        lbCriptografar.setText("Criptografar Imagem:");

        btnProcurarImagem.setText("...");
        btnProcurarImagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcurarImagemActionPerformed(evt);
            }
        });

        lbDescriptografar.setText("Descriptografar Imagem:");

        btnProcurarImagem2.setText("...");
        btnProcurarImagem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcurarImagem2ActionPerformed(evt);
            }
        });

        btnCriptografar.setText("Criptografar");
        btnCriptografar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCriptografarActionPerformed(evt);
            }
        });

        btnDescriptografar.setText("Descriptografar");
        btnDescriptografar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDescriptografarActionPerformed(evt);
            }
        });

        jLabel1.setText("Senha:");

        txtSenha.setText("1234");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtImagemCriptografar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnProcurarImagem))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtImagemDescriptografar, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnProcurarImagem2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbTitulo)
                            .addComponent(lbCriptografar)
                            .addComponent(lbDescriptografar)
                            .addComponent(btnCriptografar)
                            .addComponent(btnDescriptografar)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSenha, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbTitulo)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lbCriptografar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtImagemCriptografar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnProcurarImagem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCriptografar)
                .addGap(39, 39, 39)
                .addComponent(lbDescriptografar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtImagemDescriptografar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnProcurarImagem2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDescriptografar)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnProcurarImagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcurarImagemActionPerformed
        escolherImagem();
    }//GEN-LAST:event_btnProcurarImagemActionPerformed

    private void btnProcurarImagem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcurarImagem2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnProcurarImagem2ActionPerformed

    private void btnCriptografarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCriptografarActionPerformed
        criptografarImagem();
    }//GEN-LAST:event_btnCriptografarActionPerformed

    private void btnDescriptografarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDescriptografarActionPerformed
        descriptografarImagem();
    }//GEN-LAST:event_btnDescriptografarActionPerformed

    private void escolherImagem() {
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG Images", "jpg", "jpeg");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            txtImagemCriptografar.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }
    
    private boolean validarSenha() {
        String senha = txtSenha.getText();
        if (senha == null || senha.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Informe a senha de criptografia!");
            txtSenha.requestFocus();
            return false;
        }
        return true;
    }
    
    private void criptografarImagem() {
        if (!validarSenha()) {
            return;
        }
        
        String caminho = txtImagemCriptografar.getText();
        if (validarCaminho(caminho)) {
            try {
                byte[] content = Files.readAllBytes(Paths.get(caminho));
                
                String salt = PBKDF2Utils.getSalt();
                byte[] saltBytes = salt.getBytes();
                
                byte[] criptografado = computarCriptografia(true, salt, content);
                
                byte[] newContent = new byte[saltBytes.length + criptografado.length];
                
                System.arraycopy(saltBytes, 0, newContent, 0, saltBytes.length);
                System.arraycopy(criptografado, 0, newContent, saltBytes.length, criptografado.length);
                
                String newFileName = getEncryptedFileName(caminho);
                
                try (FileOutputStream dest = new FileOutputStream(newFileName)) {
                    dest.write(newContent);
                }
                
                txtImagemDescriptografar.setText(newFileName);
                
                JOptionPane.showMessageDialog(this, "Imagem criptografada com sucesso!\n\n" + newFileName);
            } catch (IOException ex) {
                Logger.getLogger(Questao12.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage());
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(Questao12.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DecoderException ex) {
                Logger.getLogger(Questao12.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private void descriptografarImagem() {
        if (!validarSenha()) {
            return;
        }
        
        String caminho = txtImagemDescriptografar.getText();
        if (validarCaminho(caminho)) {
            try {
                byte[] content = Files.readAllBytes(Paths.get(caminho));
                
                byte[] saltBytes = Arrays.copyOf(content, 32);
                String salt = new String(saltBytes);
                
                byte[] imgContent = Arrays.copyOfRange(content, 32, content.length);
                
                byte[] descriptografado = computarCriptografia(false, salt, imgContent);
                
                String newFileName = getDecryptedFileName(caminho);
                
                FileOutputStream dest = new FileOutputStream(newFileName);
                dest.write(descriptografado);
                dest.close();
                
                JOptionPane.showMessageDialog(this, "Imagem descriptografada com sucesso!\n\n" + newFileName);
            } catch (InvalidCipherTextException ex) {
                JOptionPane.showMessageDialog(this, "Não foi possível descriptografar a imagem!\nVerifique a senha.\n\nErro: " + ex.getMessage());
            } catch (DecoderException ex) {
                Logger.getLogger(Questao12.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Questao12.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Questao12.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    private static String removeExtension(String fileName) {
        int pos = fileName.lastIndexOf(".");
        if (pos > 0 && pos < (fileName.length() - 1)) {
            fileName = fileName.substring(0, pos);
        }
        return fileName;
    }
    
    private static String getExtension(String fileName) {
        int pos = fileName.lastIndexOf(".");
        if (pos > 0 && pos < (fileName.length() - 1)) {
            return fileName.substring(pos);
        }
        return "";
    }
    
    private byte[] computarCriptografia(boolean forEncryption, String salt, byte[] imgBytes) throws DecoderException, InvalidCipherTextException {
        GCMBlockCipher gcm = new GCMBlockCipher(new AESEngine());

        String password = txtSenha.getText();
        
        String derivedKey = PBKDF2Utils.generateDerivedKey(password, salt, MAC_SIZE);
        
        byte[] K = Hex.decodeHex(derivedKey);
        
        KeyParameter key2 = new KeyParameter(K);
        
        byte[] iv = salt.getBytes();
        AEADParameters params = new AEADParameters(key2, MAC_SIZE, iv);

        gcm.init(forEncryption, params);
        int outsize = gcm.getOutputSize(imgBytes.length);
        byte[] outc = new byte[outsize];
        
        int lengthOutc = gcm.processBytes(imgBytes, 0, imgBytes.length, outc, 0);

        gcm.doFinal(outc, lengthOutc);

        return outc;
    }
    
    private boolean validarCaminho(String caminho) {
        if (caminho == null || caminho.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Informe o caminho da imagem!");
            return false;
        }
        
        File img = new File(caminho);
        if (!img.exists()) {
            JOptionPane.showMessageDialog(this, "A imagem informada não existe!");
            return false;
        }
        
        return true;
    }

    private String getEncryptedFileName(String caminho) {
        String baseFileName = removeExtension(caminho);
        
        String fileName;
        String num = "";
        int i = 1;
        
        do {
            fileName = baseFileName + num + ".crypt";
            num = "_" + (i++);
        } while (new File(fileName).exists());
        
        return fileName;
    }
    
    private String getDecryptedFileName(String caminho) {
        String baseFileName = removeExtension(caminho);
        
        String fileName;
        String num = "";
        int i = 1;
        
        do {
            fileName = baseFileName + num + "_decrypt.jpg";
            num = "_" + (i++);
        } while (new File(fileName).exists());
        
        return fileName;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCriptografar;
    private javax.swing.JButton btnDescriptografar;
    private javax.swing.JButton btnProcurarImagem;
    private javax.swing.JButton btnProcurarImagem2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lbCriptografar;
    private javax.swing.JLabel lbDescriptografar;
    private javax.swing.JLabel lbTitulo;
    private javax.swing.JTextField txtImagemCriptografar;
    private javax.swing.JTextField txtImagemDescriptografar;
    private javax.swing.JTextField txtSenha;
    // End of variables declaration//GEN-END:variables

    

}
